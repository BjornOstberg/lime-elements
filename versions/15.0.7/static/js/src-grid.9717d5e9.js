(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./src/grid.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),r=a.n(t),m=a("./node_modules/@mdx-js/tag/dist/index.js");function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},m=Object.keys(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}n.default=function(e){var n=e.components;o(e,["components"]);return r.a.createElement(m.MDXTag,{name:"wrapper",components:n},r.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"grid"}},"Grid"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Lime Elements includes an SCSS mixin for setting up a CSS Grid. This can be used for creating an easily configurable grid, for example on the webclient dashboard."),r.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"grid-fullpage"}},"grid-fullpage"),r.a.createElement(m.MDXTag,{name:"p",components:n},"The mixin ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"grid-fullpage")," creates an eight column grid intended for use at the full application width, for example on the dashboard. It uses CSS ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas"}},"grid-template-areas")," to enable easy configuration of its child-elements."),r.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"example"}},"Example"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Scroll down to the next section for a detailed explanation of the different parts of this example."),r.a.createElement("limel-example",{name:"limel-example-grid-fullpage"}),r.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"example-explanation"}},"Example explanation"),r.a.createElement(m.MDXTag,{name:"p",components:n},"We use the ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"grid-area"),' property to give each component a unique name, and then use this name to "draw" our grid.'),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-scss",metaString:""}},'my-deep-red-widget { grid-area: drd; }\nmy-red-widget { grid-area: red; }\nmy-orange-widget { grid-area: ora; }\nmy-yellow-widget { grid-area: yel; }\nmy-green-widget { grid-area: grn; }\nmy-turquoise-widget { grid-area: trq; }\nmy-blue-widget { grid-area: blu; }\nmy-dark-blue-widget { grid-area: dbl; }\nmy-magenta-widget { grid-area: mag; }\nmy-light-grey-widget { grid-area: lgr; }\nmy-dark-grey-widget { grid-area: dgr; }\n\n$large:\n    "drd drd red red ora ora yel yel"\n    "grn grn grn grn trq trq blu dbl"\n    "grn grn grn grn mag mag lgr lgr"\n    "dgr dgr ... ... ... ... ... ...";\n')),r.a.createElement(m.MDXTag,{name:"p",components:n},"You can name each component anything you want, like ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"salespipe"),", or ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"infotile-active-support-tickets"),', but keeping the names to a fixed number of characters makes the "drawing" of the grid look more like the actual grid. One to three characters is probably a good number for most cases.'),r.a.createElement(m.MDXTag,{name:"p",components:n},'Any "name" that doesn\'t match a named element will create empty cells. In our case, we use three dots (',r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"..."),") to mark empty cells. Empty cells can be put anywhere in the grid, not just at the end."),r.a.createElement(m.MDXTag,{name:"p",components:n},"The mixin takes three variables, which describes the grid at roughly these screen sizes:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"$large"),": 8 columns - a computer screen, a tablet in landscape mode"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"$medium"),": 4 columns - a tablet in portrait mode, some large phones in landscape mode"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"$small"),": 2 columns - most phones")),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-scss",metaString:""}},'$large:\n    "drd drd red red ora ora yel yel"\n    "grn grn grn grn trq trq blu dbl"\n    "grn grn grn grn mag mag lgr lgr"\n    "dgr dgr ... ... ... ... ... ...";\n$medium:\n    "drd drd red red"\n    "ora ora yel yel"\n    "grn grn trq trq"\n    "blu blu dbl dbl"\n    "mag mag lgr lgr"\n    "dgr dgr ... ...";\n$small:\n    "drd red"\n    "ora ora"\n    "grn trq"\n    "blu blu"\n    "yel dbl"\n    "mag lgr"\n    "dgr ...";\n\n@include grid-fullpage($large, $medium, $small);\n')),r.a.createElement(m.MDXTag,{name:"p",components:n},"While the large grid is technically 8 columns, it should be thought of as 4, with the option to split a single column in half. In other words, a widget should be configured as 1, 2, 4, 6, or 8 columns wide. Avoid configuring any widget as 3, 5, or 7 columns wide. The same goes for the medium grid, where widgets should be 1, 2 or 4 columns wide, but not 3."),r.a.createElement(m.MDXTag,{name:"p",components:n},"If the name of an element does not appear in the grid-configuration, it will not be displayed at all. This can be used to hide a widget at a certain screen size, if, for example, the widget doesn't support that screen size."),r.a.createElement(m.MDXTag,{name:"p",components:n},"Please note that the mixin uses information from the webclient to determine when to switch from ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"$large")," to ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"$medium")," or ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"$small"),". This means that shadow-DOM must be ",r.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"disabled")," for the component using the grid-mixin. This, in turn, means that we must use a unique classname for the grid element (",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"limel-example-grid--grid-fullpage")," in this example)."))}}}]);