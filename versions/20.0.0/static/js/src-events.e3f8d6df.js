(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./src/events.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),m=t("./node_modules/@mdx-js/tag/dist/index.js");function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},m=Object.keys(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;i(e,["components"]);return o.a.createElement(m.MDXTag,{name:"wrapper",components:n},o.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"events-and-input-handling"}},"Events and input handling"),o.a.createElement(m.MDXTag,{name:"p",components:n},"All components in Lime Elements that has a value, and can take some kind of user input to change that value, has a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"value")," property, by which the consumer can set or update that value."),o.a.createElement(m.MDXTag,{name:"p",components:n},"When the value of the component is changed from within the component, e.g. from the user typing in a field or clicking a checkbox, a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"change")," event is dispatched from the component with the new value. This means that the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"value")," property is ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"not")," updated automatically and it is the responsibility of the consumer to set the new value, like in the example below."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"custom-events"}},"Custom events"),o.a.createElement(m.MDXTag,{name:"p",components:n},"All events that are declared in this documentation are of the type ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"}},"CustomEvent"),", which has a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"detail")," property that may contain more information regarding the event. The type of the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"detail")," property is defined in this documentation and can be used in the event handler to make the code more readable."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"dom-events"}},"DOM events"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Besides the custom events that are defined in this documentation, it is also possible to listen for any standard DOM event, e.g. ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"click"),". These events do not have the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"detail")," property and how to use them is not described within this documentation."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"example"}},"Example"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'class MyComponent {    \n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                value={this.value}\n                onChange={this.handleChange} />,\n            <limel-button\n                label="Submit"\n                onClick={this.handleClick} />\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        console.log(this.value);\n    }\n}\n')))}}}]);