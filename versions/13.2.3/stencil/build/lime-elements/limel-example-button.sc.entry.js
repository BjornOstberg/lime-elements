const l=window.LimeElements.h;class e{componentDidLoad(){this.buttonWithClickHandler=this.hostElement.shadowRoot.querySelector("#buttonWithClickHandler")}render(){return[l("section",null,l("h3",null,"Default"),l("p",null,l("limel-button",{label:"Primary",primary:!0})),l("p",null,l("limel-button",{label:"Secondary"}))),l("section",null,l("h3",null,"Disabled"),l("p",null,l("limel-button",{label:"Primary",primary:!0,disabled:!0})),l("p",null,l("limel-button",{label:"Secondary",disabled:!0}))),l("section",null,l("h3",null,"Loading"),l("p",null,l("limel-button",{label:"Primary",primary:!0,loading:!0})),l("p",null,l("limel-button",{label:"Secondary",loading:!0}))),l("section",null,l("h3",null,"Disabled & loading"),l("p",null,l("limel-button",{label:"Primary",primary:!0,disabled:!0,loading:!0})),l("p",null,l("limel-button",{label:"Secondary",disabled:!0,loading:!0}))),l("section",null,l("h3",null,"With click handler"),l("p",null,"The click handler in this example sets the attributes"," ",l("code",null,"loading")," and ",l("code",null,"disabled")," to"," ",l("code",null,"true"),". After 1 second, the ",l("code",null,"loading")," ","attribute is set to ",l("code",null,"false")," again. After another 4 seconds, the button is once again enabled."),l("p",null,"When the ",l("code",null,"loading")," attribute changes from"," ",l("code",null,"true")," to ",l("code",null,"false"),", the button automatically displays a checkmark icon for 2 seconds. Note that our click handler isn't actually involved in this."),l("p",null,l("limel-button",{id:"buttonWithClickHandler",label:"Click me!",primary:!0,onClick:()=>{this.onClick()}})))]}onClick(){const l=this.buttonWithClickHandler;l.setAttribute("disabled","true"),l.setAttribute("loading","true"),setTimeout(()=>{l.setAttribute("loading","false"),setTimeout(()=>{l.setAttribute("disabled","false")},4e3)},1e3)}static get is(){return"limel-example-button"}static get encapsulation(){return"shadow"}static get properties(){return{hostElement:{elementRef:!0}}}}export{e as LimelExampleButton};