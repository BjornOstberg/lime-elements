(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./src/events.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o={},s="wrapper";function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)(s,Object.assign({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"events-and-input-handling"},"Events and input handling"),Object(i.b)("p",null,"All components in Lime Elements that has a value, and can take some kind of user input to change that value, has a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," property, by which the consumer can set or update that value."),Object(i.b)("p",null,"When the value of the component is changed from within the component, e.g. from the user typing in a field or clicking a checkbox, a ",Object(i.b)("inlineCode",{parentName:"p"},"change")," event is dispatched from the component with the new value. This means that the ",Object(i.b)("inlineCode",{parentName:"p"},"value")," property is ",Object(i.b)("em",{parentName:"p"},"not")," updated automatically and it is the responsibility of the consumer to set the new value, like in the example below."),Object(i.b)("h2",{id:"custom-events"},"Custom events"),Object(i.b)("p",null,"All events that are declared in this documentation are of the type ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent"}),"CustomEvent"),", which has a ",Object(i.b)("inlineCode",{parentName:"p"},"detail")," property that may contain more information regarding the event. The type of the ",Object(i.b)("inlineCode",{parentName:"p"},"detail")," property is defined in this documentation and can be used in the event handler to make the code more readable."),Object(i.b)("h2",{id:"dom-events"},"DOM events"),Object(i.b)("p",null,"Besides the custom events that are defined in this documentation, it is also possible to listen for any standard DOM event, e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"click"),". These events do not have the ",Object(i.b)("inlineCode",{parentName:"p"},"detail")," property and how to use them is not described within this documentation."),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'class MyComponent {    \n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                value={this.value}\n                onChange={this.handleChange} />,\n            <limel-button\n                label="Submit"\n                onClick={this.handleClick} />\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        console.log(this.value);\n    }\n}\n')))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/events.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=src-events.6817608b16edcc3973d4.js.map