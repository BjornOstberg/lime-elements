{"version":3,"sources":["/Users/ads/src/lime-elements/src/events.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qWAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,2IAA0H,0BAAYC,WAAW,KAAvB,SAA1H,kEACA,6JAA4I,0BAAYA,WAAW,KAAvB,UAA5I,mFAAkR,0BAAYA,WAAW,KAAvB,SAAlR,gBAAoV,kBAAIA,WAAW,KAAf,OAApV,wHACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,2FAA0E,+BAAGA,WAAW,KAAQ,CAC5F,KAAQ,iEAD8D,eAA1E,iBAE0C,0BAAYA,WAAW,KAAvB,UAF1C,oFAEiL,0BAAYA,WAAW,KAAvB,UAFjL,mHAGA,iBAAQ,CACN,GAAM,cADR,cAGA,yJAAwI,0BAAYA,WAAW,KAAvB,SAAxI,kCAA4N,0BAAYA,WAAW,KAAvB,UAA5N,6EACA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ojB,oKA8BTJ,EAAWK,gBAAiB","file":"static/js/src-events.ba8c42b3.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"events-and-input-handling\"\n    }}>{`Events and input handling`}</h1>\n    <p>{`All components in Lime Elements that has a value, and can take some kind of user input to change that value, has a `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property, by which the consumer can set or update that value.`}</p>\n    <p>{`When the value of the component is changed from within the component, e.g. from the user typing in a field or clicking a checkbox, a `}<inlineCode parentName=\"p\">{`change`}</inlineCode>{` event is dispatched from the component with the new value. This means that the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property is `}<em parentName=\"p\">{`not`}</em>{` updated automatically and it is the responsibility of the consumer to set the new value, like in the example below.`}</p>\n    <h2 {...{\n      \"id\": \"custom-events\"\n    }}>{`Custom events`}</h2>\n    <p>{`All events that are declared in this documentation are of the type `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\"\n      }}>{`CustomEvent`}</a>{`, which has a `}<inlineCode parentName=\"p\">{`detail`}</inlineCode>{` property that may contain more information regarding the event. The type of the `}<inlineCode parentName=\"p\">{`detail`}</inlineCode>{` property is defined in this documentation and can be used in the event handler to make the code more readable.`}</p>\n    <h2 {...{\n      \"id\": \"dom-events\"\n    }}>{`DOM events`}</h2>\n    <p>{`Besides the custom events that are defined in this documentation, it is also possible to listen for any standard DOM event, e.g. `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{`. These events do not have the `}<inlineCode parentName=\"p\">{`detail`}</inlineCode>{` property and how to use them is not described within this documentation.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`class MyComponent {    \n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                value={this.value}\n                onChange={this.handleChange} />,\n            <limel-button\n                label=\"Submit\"\n                onClick={this.handleClick} />\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        console.log(this.value);\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}