{"version":3,"sources":["/Users/ads/src/lime-elements/src/components/grid/grid.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","name","isMDXComponent"],"mappings":"mXAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,QADR,QAGA,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,sGAAwK,+BAAGA,WAAW,KAAQ,CAC1L,KAAQ,yEAD4J,uBAAxK,wDAGA,2BAAaC,KAAK,eAClB,iBAAQ,CACN,GAAM,WADR,WAGA,6BAAeA,KAAK,uBACpB,iBAAQ,CACN,GAAM,uBADR,uBAGA,mCAAkB,0BAAYD,WAAW,KAAvB,aAAlB,qGACA,4EAA2D,0BAAYA,WAAW,KAAvB,aAA3D,QAAyH,0BAAYA,WAAW,KAAvB,mCAAzH,6LACA,2HAAyG,0BAAYA,WAAW,KAAvB,KAAzG,4FACA,0RACA,sR,kLAKJJ,EAAWM,gBAAiB","file":"static/js/src-components-grid-grid.34938036.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"grid\"\n    }}>{`Grid`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`limel-grid`}</inlineCode>{` component creates a grid which can be used to control the layout of other components. It uses CSS `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas\"\n      }}>{`grid-template-areas`}</a>{` to enable easy configuration of its child-elements.`}</p>\n    <limel-props name=\"limel-grid\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <limel-example name=\"limel-example-grid\" />\n    <h2 {...{\n      \"id\": \"example-explanation\"\n    }}>{`Example explanation`}</h2>\n    <p>{`We use the `}<inlineCode parentName=\"p\">{`grid-area`}</inlineCode>{` property to give each component a unique name, and then use this name to \"draw\" our grid layout.`}</p>\n    <p>{`You can name each component anything you want, like `}<inlineCode parentName=\"p\">{`salespipe`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`infotile-active-support-tickets`}</inlineCode>{`, but keeping the names to a fixed number of characters makes the \"drawing\" of the grid look more like the actual grid. One to three characters is probably a good number for most cases.`}</p>\n    <p>{`Any \"name\" that doesn't match a named element will create empty cells. In our case, we use a dot (`}<inlineCode parentName=\"p\">{`.`}</inlineCode>{`) to mark empty cells. Empty cells can be put anywhere in the grid, not just at the end.`}</p>\n    <p>{`Note that we can add some extra spaces after the dot marking an empty cell, in order to align the next cell in our config-string. This can also be used if your elements have named of differing lengths. The extra whitespace is ignored when the CSS is parsed.`}</p>\n    <p>{`If the name of an element does not appear in the grid-configuration, it will not be displayed at all. This might be useful if you wish to show a specific component only under certain circumstances, like if the viewport is large enough to accomodate it.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}