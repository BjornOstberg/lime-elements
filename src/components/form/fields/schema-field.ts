import { LimeElementsAdapter } from '../adapter';
import JSONSchemaField from 'react-jsonschema-form/lib/components/fields/SchemaField';
import React from 'react';
import { FieldProps } from './types';
import { union, isEqual, isPlainObject } from 'lodash-es';
import { retrieveSchema } from 'react-jsonschema-form/lib/utils';

const hasOverridenField = (schema): boolean => {
    return Boolean(schema.lime?.overrides?.field?.name);
};

const getOverridenField = (
    schema
): { name: string; props: { [key: string]: any } } => {
    const name = schema.lime?.overrides?.field?.name;
    const props = schema.lime?.overrides?.field?.props || {};

    return { name: name, props: props };
};

const equals = (a, b) => a === b;

export class SchemaField extends React.Component<FieldProps> {
    constructor(props: FieldProps) {
        super(props);

        this.handleChange = this.handleChange.bind(this);
        this.detectDependencyAffectingChanges = this.detectDependencyAffectingChanges.bind(
            this
        );
    }

    handleChange(event) {
        event.stopPropagation();

        console.log('Schema Field Change', event.detail);
        this.detectDependencyAffectingChanges(event.detail);
    }

    detectDependencyAffectingChanges(data) {
        const {
            formData,
            schema,
            registry: { definitions },
            onChange,
        } = this.props;
        console.log(
            'Schema Field detecting dependency changes',
            data,
            this.props,
            isPlainObject(data)
        );

        // Dependencies only exist on object types
        if (isPlainObject(data)) {
            console.log('Schema Field comparing', formData, data);

            // Get the schema generated by the current data
            const currentSchema =
                '$ref' in schema
                    ? retrieveSchema(schema, definitions, formData)
                    : schema;

            // Get the new schema that is calculated for the new data
            const newSchema =
                '$ref' in schema
                    ? retrieveSchema(schema, definitions, data)
                    : schema;

            console.log('Schema Field changed got schema', newSchema);

            const dependentPropertyKeys = this.getDifferentKeys(
                newSchema.properties,
                currentSchema.properties,
                isEqual
            );

            // Reset keys that are dependent on the changed value
            // the values for these dependent fields will be repopulated
            // with defaults during the next render
            for (const dependentPropertyKey of dependentPropertyKeys) {
                delete data[dependentPropertyKey];
            }
            // }

            console.log('Schema Field new data', data);
        }

        onChange(data);
    }

    getDifferentKeys(a: object, b: object, equalsFunc = equals): any[] {
        const keys = union(Object.keys(a), Object.keys(b));
        return keys.filter(key => {
            return !equalsFunc(b[key], a[key]);
        });
    }

    render() {
        const fieldProps = {
            ...this.props,
            onChange: this.detectDependencyAffectingChanges,
        };

        if (hasOverridenField(this.props.schema)) {
            console.log('OVERRIDEN SCHEMA FIELD', this.props);

            const { name, props: overridenFieldProps } = getOverridenField(
                this.props.schema
            );
            return React.createElement(LimeElementsAdapter, {
                name: name,
                elementProps: {
                    fieldProps: fieldProps,
                    ...overridenFieldProps,
                },
                events: {
                    change: this.handleChange,
                },
            });
        }

        return React.createElement(JSONSchemaField, fieldProps);
    }
}
